{"ast":null,"code":"var _jsxFileName = \"E:\\\\git_projects\\\\keepnote_new\\\\src\\\\component\\\\Form.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { useState, useEffect } from 'react';\nimport Card from \"./Card\"; // const getLocalItems = () =>{\n//     let List = localStorage.getItem(\"List\");\n//     if(List){\n//         return JSON.parse(localStorage.getItem('List'))\n//     }else{\n//         return [];\n//     }\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Form = () => {\n  _s();\n\n  const itemListData = JSON.parse(localStorage.getItem('List'));\n  const [InputValue, setInputValue] = useState({\n    title: \"\",\n    content: \"\"\n  });\n  const [NewInputItem, SetNewInputItem] = useState([]);\n  const [showFrom, setShowForm] = useState(false);\n  const [toggleButton, setToggleButton] = useState(false);\n  const [isEditItem, setIsEditItem] = useState(\"\");\n\n  const AddNote = () => {\n    setShowForm(true);\n  };\n\n  const inputFun = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    setInputValue(prevValue => {\n      return {\n        id: new Date().getTime().toString(),\n        ...prevValue,\n        [name]: value,\n        color: fixedColor\n      };\n    });\n  };\n\n  let colors = ['#741ee57d', '#1e88e57d', '#f1055573', '#8000807a', '#0e921975', '#ffa50082']; //let colorIndex  = 1;\n\n  var fixedColor = colors[Math.floor(Math.random() * colors.length)];\n\n  const addItem = () => {\n    if (InputValue.title == \"\" || InputValue.content == \"\") {\n      alert(\"Please enter title & contents\");\n    } else if (InputValue && toggleButton) {\n      console.log(InputValue);\n      SetNewInputItem(NewInputItem.map(elem => {\n        console.log(\"Elem : \" + elem);\n        console.log(\"isEditItem : \" + isEditItem);\n\n        if (elem.id === isEditItem) {\n          console.log(\"updated\"); //return{elem}\n\n          console.log(\"title : \" + InputValue.id); //return {...elem, InputValue};\n\n          return {\n            id: elem.id,\n            color: elem.color,\n            title: InputValue.title,\n            content: InputValue.content\n          };\n        }\n\n        return elem;\n      }));\n      setToggleButton(false);\n      setInputValue({\n        title: \"\",\n        content: \"\"\n      });\n      setIsEditItem(null);\n    } else {\n      //const allInputData = {id: new Date().getTime.toString(), name:InputValue}\n      SetNewInputItem(itemListData => {\n        //return [...oldItem, InputValue]\n        return localStorage.setItem('List', JSON.stringify([...itemListData, InputValue]));\n      });\n      console.log(SetNewInputItem); //localStorage.setItem('List', JSON.stringify(SetNewInputItem))\n\n      setInputValue({\n        title: \"\",\n        content: \"\"\n      });\n      setShowForm(true);\n    }\n\n    setShowForm(false);\n  }; // const BtnEditItem = () => {\n  // }\n\n\n  const EditItem = id => {\n    setShowForm(true); //console.log(id);\n\n    const newEditItem = NewInputItem.find((elem, index) => {\n      // console.log(\"elem.id :\" + elem.id)\n      // console.log(\"index :\" + index)\n      // console.log(\"ID :\" + id)\n      return elem.id == id; //return elem.id;\n    });\n    setToggleButton(true); //console.log(newEditItem);\n    //setInputValue(newEditItem.title);\n\n    setInputValue({\n      title: newEditItem.title,\n      content: newEditItem.content\n    });\n    setIsEditItem(newEditItem.id);\n  };\n\n  const DeleteItem = id => {\n    //console.log(id);   \n    // SetNewInputItem((oldItem) => {\n    //     return oldItem.filter((objOld, index) => {\n    //         return index !== id;\n    //     })\n    // })\n    const updatedItem = NewInputItem.filter((elem, ind) => {\n      return elem.id !== id;\n    });\n    SetNewInputItem(updatedItem);\n  };\n\n  const RemoveAll = () => {\n    SetNewInputItem([]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row d-flex justify-content-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-xs-12 col-sm-12\",\n          style: {\n            marginTop: \"90px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-sm btn-outline-warning\",\n            onClick: AddNote,\n            children: [/*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 94\n            }, this), \"\\xA0Add Note\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-sm btn-outline-danger\",\n            style: {\n              float: \"right\"\n            },\n            onClick: RemoveAll,\n            children: [/*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 119\n            }, this), \"\\xA0Remove All\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card col-12 col-sm-8 col-md-4\",\n          className: showFrom ? \"\" : \"hide\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"card-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-3\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: InputValue.title,\n                name: \"title\",\n                onChange: inputFun,\n                className: \"form-control\",\n                id: \"title\",\n                placeholder: \"Title\",\n                \"aria-describedby\": \"emailHelp\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"\",\n              children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n                onChange: inputFun,\n                value: InputValue.content,\n                name: \"content\",\n                className: \"form-control\",\n                placeholder: \"Content\",\n                id: \"content\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 29\n            }, this), toggleButton ? /*#__PURE__*/_jsxDEV(Button, {\n              type: \"button\",\n              onClick: addItem,\n              className: \"btn_Add btn-sm btn-default float-right mt-2\",\n              children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 144\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 48\n            }, this) : /*#__PURE__*/_jsxDEV(Button, {\n              type: \"button\",\n              onClick: addItem,\n              className: \"btn_Add btn-sm btn-default float-right mt-2\",\n              children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 264\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 168\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row scrollCard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Form, \"T8PVHRK5L21cUhtU0NTDRg3k1Wo=\");\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["E:/git_projects/keepnote_new/src/component/Form.jsx"],"names":["React","Button","AddIcon","DeleteIcon","EditIcon","useState","useEffect","Card","Form","itemListData","JSON","parse","localStorage","getItem","InputValue","setInputValue","title","content","NewInputItem","SetNewInputItem","showFrom","setShowForm","toggleButton","setToggleButton","isEditItem","setIsEditItem","AddNote","inputFun","event","value","name","target","prevValue","id","Date","getTime","toString","color","fixedColor","colors","Math","floor","random","length","addItem","alert","console","log","map","elem","setItem","stringify","EditItem","newEditItem","find","index","DeleteItem","updatedItem","filter","ind","RemoveAll","marginTop","float"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { useState,useEffect } from 'react';\r\nimport Card from \"./Card\";\r\n\r\n\r\n// const getLocalItems = () =>{\r\n//     let List = localStorage.getItem(\"List\");\r\n\r\n//     if(List){\r\n//         return JSON.parse(localStorage.getItem('List'))\r\n//     }else{\r\n//         return [];\r\n//     }\r\n// }\r\n\r\nconst Form = () => {   \r\n    const itemListData = JSON.parse(localStorage.getItem('List')) \r\n    const [InputValue, setInputValue] = useState({\r\n        title:\"\",\r\n        content: \"\"\r\n    });\r\n    const [NewInputItem, SetNewInputItem] = useState([]);\r\n    \r\n    const [showFrom , setShowForm] = useState(false);\r\n\r\n    const [toggleButton, setToggleButton] = useState(false);\r\n\r\n    const [isEditItem, setIsEditItem] = useState(\"\")\r\n\r\n    const AddNote = () => {\r\n        setShowForm(true);\r\n    }\r\n\r\n    const inputFun = (event) => {\r\n        const {value, name} = event.target;\r\n\r\n        setInputValue((prevValue) => {            \r\n            return{\r\n                id:new Date().getTime().toString(),\r\n                ...prevValue,\r\n                [name]: value,\r\n                color: fixedColor\r\n            }\r\n        });\r\n    }\r\n\r\n    let colors = ['#741ee57d', '#1e88e57d', '#f1055573','#8000807a','#0e921975','#ffa50082'];\r\n    //let colorIndex  = 1;\r\n    var fixedColor = colors[Math.floor(Math.random() * colors.length)]\r\n    const addItem = () => {                \r\n        if(InputValue.title == \"\" || InputValue.content == \"\"){\r\n            alert(\"Please enter title & contents\");\r\n        }\r\n        else if(InputValue && toggleButton){\r\n            console.log(InputValue);\r\n            SetNewInputItem(\r\n                NewInputItem.map((elem) => {\r\n                    console.log( \"Elem : \" + elem);\r\n                    console.log( \"isEditItem : \" + isEditItem);\r\n                    \r\n                    if(elem.id === isEditItem){\r\n                        console.log(\"updated\");\r\n                        //return{elem}\r\n                        console.log( \"title : \" + InputValue.id);\r\n                        //return {...elem, InputValue};\r\n                        return{\r\n                            id:elem.id,\r\n                            color:elem.color,\r\n                            title:InputValue.title,\r\n                            content: InputValue.content\r\n                        }\r\n                    }\r\n                    return elem;\r\n                })\r\n            )\r\n\r\n            setToggleButton(false);\r\n            setInputValue({\r\n                title:\"\",\r\n                content: \"\"\r\n            })\r\n            \r\n            setIsEditItem(null)\r\n        }\r\n        else{\r\n            //const allInputData = {id: new Date().getTime.toString(), name:InputValue}\r\n            SetNewInputItem((itemListData) => {\r\n                //return [...oldItem, InputValue]\r\n                return localStorage.setItem('List', JSON.stringify([...itemListData, InputValue]))\r\n            })\r\n            console.log(SetNewInputItem)\r\n            //localStorage.setItem('List', JSON.stringify(SetNewInputItem))\r\n            setInputValue({\r\n                title:\"\",\r\n                content: \"\"\r\n            });\r\n            setShowForm(true);\r\n        }\r\n        setShowForm(false);   \r\n    }\r\n\r\n    // const BtnEditItem = () => {\r\n\r\n    // }\r\n\r\n    const EditItem = (id) => {\r\n        setShowForm(true); \r\n        //console.log(id);\r\n        const newEditItem = NewInputItem.find((elem, index) => {\r\n            // console.log(\"elem.id :\" + elem.id)\r\n            // console.log(\"index :\" + index)\r\n            // console.log(\"ID :\" + id)\r\n            return elem.id == id\r\n            //return elem.id;\r\n        });\r\n        setToggleButton(true);\r\n        //console.log(newEditItem);\r\n        //setInputValue(newEditItem.title);\r\n        setInputValue({\r\n            title:newEditItem.title,\r\n            content: newEditItem.content\r\n        })\r\n        \r\n        setIsEditItem(newEditItem.id)\r\n    }\r\n\r\n    const DeleteItem = (id) => {   \r\n        //console.log(id);   \r\n        // SetNewInputItem((oldItem) => {\r\n        //     return oldItem.filter((objOld, index) => {\r\n        //         return index !== id;\r\n        //     })\r\n        // })\r\n        const updatedItem = NewInputItem.filter((elem, ind) => {\r\n            return elem.id !== id;\r\n        });\r\n        SetNewInputItem(updatedItem);\r\n    }\r\n\r\n    const RemoveAll = () => {\r\n        SetNewInputItem([])\r\n    }\r\n    \r\n\r\n    return(\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"row d-flex justify-content-center\">\r\n                    <div className=\"col-xs-12 col-sm-12\" style={{marginTop:\"90px\"}}>\r\n                        <button className=\"btn btn-sm btn-outline-warning\" onClick={AddNote}><AddIcon />&nbsp;Add Note</button>\r\n                        <button className=\"btn btn-sm btn-outline-danger\" style={{float:\"right\"}} onClick={RemoveAll}><DeleteIcon />&nbsp;Remove All</button>                        \r\n                    </div>\r\n                    <div className=\"card col-12 col-sm-8 col-md-4\" className={showFrom ? \"\" : \"hide\"}>\r\n                        <form className=\"card-body\">\r\n                            <div className=\"mb-3\">                \r\n                                <input type=\"text\" value={InputValue.title} name=\"title\" onChange={inputFun} className=\"form-control\" id=\"title\" placeholder=\"Title\" aria-describedby=\"emailHelp\" />\r\n                            </div>\r\n                            <div className=\"\">\r\n                                <textarea onChange={inputFun} value={InputValue.content} name=\"content\" className=\"form-control\" placeholder=\"Content\" id=\"content\"></textarea>\r\n                            </div>\r\n                            {\r\n                                toggleButton ? <Button type=\"button\" onClick={addItem} className=\"btn_Add btn-sm btn-default float-right mt-2\"><EditIcon /></Button> : <Button type=\"button\" onClick={addItem} className=\"btn_Add btn-sm btn-default float-right mt-2\"><AddIcon /></Button>\r\n                            }                            \r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row scrollCard\">                    \r\n                    {/* {NewInputItem.map((itemVal, index) => {                        \r\n                        return(\r\n                            <Card\r\n                                key={index}\r\n                                id={itemVal.id}\r\n                                title={itemVal.title}\r\n                                content={itemVal.content}\r\n                                onSelect={DeleteItem}\r\n                                onEdit={EditItem}\r\n                                color={itemVal.color}\r\n                            />\r\n                        )\r\n                    })} */}\r\n                    {/* {itemListData.map((itemVal, index) => {                        \r\n                        return(\r\n                            <Card\r\n                                key={index}\r\n                                id={itemVal.id}\r\n                                title={itemVal.title}\r\n                                content={itemVal.content}\r\n                                onSelect={DeleteItem}\r\n                                onEdit={EditItem}\r\n                                color={itemVal.color}\r\n                            />\r\n                        )\r\n                    })} */}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Form;"]},"metadata":{},"sourceType":"module"}